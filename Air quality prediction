from google.colab import files
uploaded = files.upload()

import io
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Automatically get the uploaded filename
filename = next(iter(uploaded))

# Load the dataset
df = pd.read_csv(io.BytesIO(uploaded[filename]))

# 1. Display the first few rows
print("First 5 rows of the dataset:")
print(df.head())

# 2. Data cleaning
print("\nMissing values per column:")
print(df.isnull().sum())

# Fill missing values with the mean of each column
df.fillna(df.mean(numeric_only=True), inplace=True)

# 3. Statistical summary
print("\nStatistical Summary:")
print(df.describe())

# Correlation matrix
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title("Correlation Matrix")
plt.tight_layout()
plt.show()

# 4. Data Visualization
for column in df.select_dtypes(include=['float64', 'int64']).columns:
    plt.figure()
    sns.histplot(df[column], kde=True)
    plt.title(f"Distribution of {column}")
    plt.show()

# 5. Train a model (Assuming 'Air_Quality_Index' is the target column — adjust as needed)
target_column = 'Air_Quality_Index'
if target_column in df.columns:
    X = df.drop(columns=[target_column])
    y = df[target_column]

    # Ensure only numeric features are used
    X = X.select_dtypes(include=['float64', 'int64'])

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    model = RandomForestRegressor(random_state=42)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)

    print("\nModel Evaluation:")
    print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred):.2f}")
    print(f"R² Score: {r2_score(y_test, y_pred):.2f}")
else:
    print(f"\nTarget column '{target_column}' not found. Please adjust the target_column variable.")
